# Generated by Django 4.1.7 on 2023-03-03 14:11

from django.db import migrations
import csv
import json


def import_resource(resource_model, name, lang):
    resource = resource_model(name=name, lang=lang)
    resource.save()
    return resource


def import_tokens(
    source_token_model, target_token_model, tsv_path, related_resource, type
):
    with open(tsv_path) as file:
        tsv_file = csv.reader(file, delimiter="\t")
        for line in tsv_file:
            if type == "source":
                new_token = source_token_model(
                    token_id=line[0], resource=related_resource, text=line[6]
                )
                new_token.save()
            if type == "target":
                new_token = target_token_model(
                    token_id=line[0], resource=related_resource, text=line[2]
                )
                new_token.save()


def import_alignment(alignment_model, name, source, target):
    new_alignment = alignment_model(name=name, source=source, target=target)
    return new_alignment.save()


def import_links(
    link_model,
    source_token_model,
    target_token_model,
    alignment,
    alignment_data_path,
    na27_resource,
):
    print(f"Importing alignment: {alignment_data_path}")
    with open(alignment_data_path, "r") as f:
        alignment_data = json.load(f)
        print(len(alignment_data))
        for link in alignment_data:
            id = list(link.keys())[0]
            extracted_link = list(link.values())[0]
            source_token_ids = extracted_link["NA27"]
            target_token_ids = extracted_link["YLT"]
            source_tokens = []
            target_tokens = []
            for the_id in source_token_ids:
                # print(f"retrieving source token: {the_id}")
                token = source_token_model.objects.get(
                    token_id=the_id, resource=na27_resource
                )
                source_tokens.append(token)

            for the_id in target_token_ids:
                # print(f"retrieving target token: {the_id}")
                token = target_token_model.objects.get(token_id=the_id)
                target_tokens.append(token)

            # print("Create link model")
            new_link = link_model(alignment=alignment)
            # print("first save")
            new_link.save()
            # print("add tokens")
            for source_token in source_tokens:
                new_link.source_tokens.add(source_token)
            for target_token in target_tokens:
                new_link.target_tokens.add(target_token)
            # print("second save")
            new_link.save()


def populate_data(apps, schema_editor):
    resource_model = apps.get_model(app_label="alignment_api", model_name="Resource")
    source_token_model = apps.get_model(
        app_label="alignment_api", model_name="SourceToken"
    )
    target_token_model = apps.get_model(
        app_label="alignment_api", model_name="TargetToken"
    )
    alignment_model = apps.get_model(app_label="alignment_api", model_name="Alignment")
    link_model = apps.get_model(app_label="alignment_api", model_name="Link")

    # Import NA27
    # - Resource
    # - Token(s)
    print("import na27")
    na27_resource = import_resource(resource_model, "na27", "grk")
    import_tokens(
        source_token_model,
        target_token_model,
        "data/data/sources/NA27-YLT.tsv",
        na27_resource,
        "source",
    )

    # Import YLT
    # - Resource
    # - Token(s)
    print("import ylt")
    ylt_resource = import_resource(resource_model, "ylt", "eng")
    import_tokens(
        source_token_model,
        target_token_model,
        "data/data/targets/NA27-YLT.tsv",
        ylt_resource,
        "target",
    )

    # Import NA27 / YLT Alignment
    # - Alignment
    # - Link(s)
    print("import na27-ylt alignment")
    na27_ylt_alignment = import_alignment(
        alignment_model, "NA27-YLT", na27_resource, ylt_resource
    )
    print("import na27-ylt links")
    import_links(
        link_model,
        source_token_model,
        target_token_model,
        na27_ylt_alignment,
        "data/data/alignments/eng/YLT/NA27-YLT-manual.json",
        na27_resource,
    )


def backwards(apps, schema_editor):
    resource_model = apps.get_model(app_label="alignment_api", model_name="Resource")
    resource_model.objects.all().delete()

    source_token_model = apps.get_model(
        app_label="alignment_api", model_name="SourceToken"
    )
    source_token_model.objects.all().delete()

    target_token_model = apps.get_model(
        app_label="alignment_api", model_name="TargetToken"
    )

    target_token_model.objects.all().delete()

    alignment_model = apps.get_model(app_label="alignment_api", model_name="Alignment")
    alignment_model.objects.all().delete()

    link_model = apps.get_model(app_label="alignment_api", model_name="Link")
    link_model.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        (
            "alignment_api",
            "0002_rename_token_sourcetoken_remove_link_sourcetokens_and_more",
        ),
    ]

    operations = [migrations.RunPython(populate_data, backwards)]
